name: Build Image & Run Container on EC2

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-container:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Check out repository code
    - name: Checkout code
      uses: actions/checkout@v4

    # Step 2: Configure AWS security credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    # Step 3: Login to AWS ECR
    - name: Login to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Step 4: Build, tag, then push Docker image to AWS ECR
    - name: Build, tag, and push image to AWS ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: latest             
      run: |
        cd flask-app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    # Step 5: Setup SSH agent Login
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # Step 6: Add EC2 host to known hosts
    - name: Add EC2 host to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    # Step 7: Run Container
    - name: Deploy image to EC2
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: latest  
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        # SSH into EC2 and run docker commands
        ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} "
          # Login to ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

          # Stop and remove existing container if it exists
          docker stop my-container || true
          docker rm my-container || true
          
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker run -d --name my-container -p 5000:5000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        "
